/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {

        vector<int>ans={-1,-1};
        ListNode* temp=head;
         ListNode* prev=temp;
        ListNode* curr=temp->next;  
        int minDis=INT_MAX;

        int curr_index=1;
        int prevCritical=0;
        int firstCritical=0;

        while(curr->next != nullptr){
            if((curr->val < prev->val && curr->val < curr->next->val)||
             (curr->val> prev->val && curr->val > curr->next->val)){

                if(prevCritical ==0){
                    prevCritical=curr_index;
                    firstCritical=curr_index;
                }
                else{
                    minDis=min(minDis,curr_index-prevCritical);
                    prevCritical=curr_index;
                }
             }
             curr_index++;
             prev=curr;
             curr=curr->next;

         } 
         if(minDis !=INT_MAX){
            int maxDis=prevCritical-firstCritical;
            ans={minDis,maxDis};
         }
         return ans;
      
      
    }
};
