// Last updated: 8/7/2025, 11:19:51 PM
class Solution {
    private:
    bool check(int start,int V,vector<vector<int>>& graph,vector<int>&color){
 

        queue<int>q;
        q.push(start);
        
        color[start]=0;

        while(!q.empty()){
            int node=q.front();
            q.pop();

            for(auto nbr:graph[node]){

                if(color[nbr]==-1){
                    color[nbr]=!color[node];
                    q.push(nbr);
                }
                else if(color[nbr]==color[node]){
                    return false;
                }
            }
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
         int V=graph.size();
       vector<int>color(V,-1);

       for(int i=0;i<V;i++){
        if(color[i] == -1){
        if(check(i,V,graph,color)==false){
            return false;
        }
       }
       }
       return true;
    }
};